"use strict";
// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudFunctionsServiceClient = void 0;
const gax = require("google-gax");
const path = require("path");
const gapicConfig = require("./cloud_functions_service_client_config.json");
const google_gax_1 = require("google-gax");
const version = require('../../../package.json').version;
/**
 *  A service that application uses to manipulate triggers and functions.
 * @class
 * @memberof v1
 */
class CloudFunctionsServiceClient {
    /**
     * Construct an instance of CloudFunctionsServiceClient.
     *
     * @param {object} [options] - The configuration object. See the subsequent
     *   parameters for more details.
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     */
    constructor(opts) {
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include the service address and port.
        const staticMembers = this
            .constructor;
        const servicePath = opts && opts.servicePath
            ? opts.servicePath
            : opts && opts.apiEndpoint
                ? opts.apiEndpoint
                : staticMembers.servicePath;
        const port = opts && opts.port ? opts.port : staticMembers.port;
        if (!opts) {
            opts = { servicePath, port };
        }
        opts.servicePath = opts.servicePath || servicePath;
        opts.port = opts.port || port;
        // users can override the config from client side, like retry codes name.
        // The detailed structure of the clientConfig can be found here: https://github.com/googleapis/gax-nodejs/blob/master/src/gax.ts#L546
        // The way to override client config for Showcase API:
        //
        // const customConfig = {"interfaces": {"google.showcase.v1beta1.Echo": {"methods": {"Echo": {"retry_codes_name": "idempotent", "retry_params_name": "default"}}}}}
        // const showcaseClient = new showcaseClient({ projectId, customConfig });
        opts.clientConfig = opts.clientConfig || {};
        // If we're running in browser, it's OK to omit `fallback` since
        // google-gax has `browser` field in its `package.json`.
        // For Electron (which does not respect `browser` field),
        // pass `{fallback: true}` to the CloudFunctionsServiceClient constructor.
        this._gaxModule = opts.fallback ? gax.fallback : gax;
        // Create a `gaxGrpc` object, with any grpc-specific options
        // sent to the client.
        opts.scopes = this
            .constructor.scopes;
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        // For Node.js, pass the path to JSON proto file.
        // For browsers, pass the JSON content.
        const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');
        this._protos = this._gaxGrpc.loadProto(opts.fallback
            ? // eslint-disable-next-line @typescript-eslint/no-var-requires
                require('../../protos/protos.json')
            : nodejsProtoPath);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            cloudFunctionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/functions/{function}'),
            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listFunctions: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'functions'),
        };
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const protoFilesRoot = opts.fallback
            ? this._gaxModule.protobuf.Root.fromJSON(
            // eslint-disable-next-line @typescript-eslint/no-var-requires
            require('../../protos/protos.json'))
            : this._gaxModule.protobuf.loadSync(nodejsProtoPath);
        this.operationsClient = this._gaxModule
            .lro({
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        })
            .operationsClient(opts);
        const createFunctionResponse = protoFilesRoot.lookup('.google.cloud.functions.v1.CloudFunction');
        const createFunctionMetadata = protoFilesRoot.lookup('.google.cloud.functions.v1.OperationMetadataV1');
        const updateFunctionResponse = protoFilesRoot.lookup('.google.cloud.functions.v1.CloudFunction');
        const updateFunctionMetadata = protoFilesRoot.lookup('.google.cloud.functions.v1.OperationMetadataV1');
        const deleteFunctionResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteFunctionMetadata = protoFilesRoot.lookup('.google.cloud.functions.v1.OperationMetadataV1');
        this.descriptors.longrunning = {
            createFunction: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createFunctionResponse.decode.bind(createFunctionResponse), createFunctionMetadata.decode.bind(createFunctionMetadata)),
            updateFunction: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateFunctionResponse.decode.bind(updateFunctionResponse), updateFunctionMetadata.decode.bind(updateFunctionMetadata)),
            deleteFunction: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteFunctionResponse.decode.bind(deleteFunctionResponse), deleteFunctionMetadata.decode.bind(deleteFunctionMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.functions.v1.CloudFunctionsService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.cloudFunctionsServiceStub) {
            return this.cloudFunctionsServiceStub;
        }
        // Put together the "service stub" for
        // google.cloud.functions.v1.CloudFunctionsService.
        this.cloudFunctionsServiceStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.functions.v1.CloudFunctionsService')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.functions.v1.CloudFunctionsService, this._opts);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const cloudFunctionsServiceStubMethods = [
            'listFunctions',
            'getFunction',
            'createFunction',
            'updateFunction',
            'deleteFunction',
            'callFunction',
            'generateUploadUrl',
            'generateDownloadUrl',
            'setIamPolicy',
            'getIamPolicy',
            'testIamPermissions',
        ];
        for (const methodName of cloudFunctionsServiceStubMethods) {
            const callPromise = this.cloudFunctionsServiceStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], this.descriptors.page[methodName] ||
                this.descriptors.stream[methodName] ||
                this.descriptors.longrunning[methodName]);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.cloudFunctionsServiceStub;
    }
    /**
     * The DNS address for this API service.
     */
    static get servicePath() {
        return 'cloudfunctions.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     */
    static get apiEndpoint() {
        return 'cloudfunctions.googleapis.com';
    }
    /**
     * The port for this API service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @param {function(Error, string)} callback - the callback to
     *   be called with the current project Id.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    /**
     * Returns a function with the given name from the requested project.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the function which details should be obtained.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [CloudFunction]{@link google.cloud.functions.v1.CloudFunction}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    getFunction(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            name: request.name || '',
        });
        this.initialize();
        return this.innerApiCalls.getFunction(request, options, callback);
    }
    /**
     * Synchronously invokes a deployed Cloud Function. To be used for testing
     * purposes as very limited traffic is allowed. For more information on
     * the actual limits, refer to
     * [Rate Limits](https://cloud.google.com/functions/quotas#rate_limits).
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the function to be called.
     * @param {string} request.data
     *   Required. Input to be passed to the function.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [CallFunctionResponse]{@link google.cloud.functions.v1.CallFunctionResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    callFunction(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            name: request.name || '',
        });
        this.initialize();
        return this.innerApiCalls.callFunction(request, options, callback);
    }
    /**
     * Returns a signed URL for uploading a function source code.
     * For more information about the signed URL usage see:
     * https://cloud.google.com/storage/docs/access-control/signed-urls.
     * Once the function source code upload is complete, the used signed
     * URL should be provided in CreateFunction or UpdateFunction request
     * as a reference to the function source code.
     *
     * When uploading source code to the generated signed URL, please follow
     * these restrictions:
     *
     * * Source file type should be a zip file.
     * * Source file size should not exceed 100MB limit.
     * * No credentials should be attached - the signed URLs provide access to the
     *   target bucket using internal service identity; if credentials were
     *   attached, the identity from the credentials would be used, but that
     *   identity does not have permissions to upload files to the URL.
     *
     * When making a HTTP PUT request, these two headers need to be specified:
     *
     * * `content-type: application/zip`
     * * `x-goog-content-length-range: 0,104857600`
     *
     * And this header SHOULD NOT be specified:
     *
     * * `Authorization: Bearer YOUR_TOKEN`
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The project and location in which the Google Cloud Storage signed URL
     *   should be generated, specified in the format `projects/* /locations/*`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [GenerateUploadUrlResponse]{@link google.cloud.functions.v1.GenerateUploadUrlResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    generateUploadUrl(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            parent: request.parent || '',
        });
        this.initialize();
        return this.innerApiCalls.generateUploadUrl(request, options, callback);
    }
    /**
     * Returns a signed URL for downloading deployed function source code.
     * The URL is only valid for a limited period and should be used within
     * minutes after generation.
     * For more information about the signed URL usage see:
     * https://cloud.google.com/storage/docs/access-control/signed-urls
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   The name of function for which source code Google Cloud Storage signed
     *   URL should be generated.
     * @param {number} request.versionId
     *   The optional version of function. If not set, default, current version
     *   is used.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [GenerateDownloadUrlResponse]{@link google.cloud.functions.v1.GenerateDownloadUrlResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    generateDownloadUrl(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            name: request.name || '',
        });
        this.initialize();
        return this.innerApiCalls.generateDownloadUrl(request, options, callback);
    }
    /**
     * Sets the IAM access control policy on the specified function.
     * Replaces any existing policy.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being specified.
     *   See the operation documentation for the appropriate value for this field.
     * @param {google.iam.v1.Policy} request.policy
     *   REQUIRED: The complete policy to be applied to the `resource`. The size of
     *   the policy is limited to a few 10s of KB. An empty policy is a
     *   valid policy but certain Cloud Platform services (such as Projects)
     *   might reject them.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    setIamPolicy(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            resource: request.resource || '',
        });
        this.initialize();
        return this.innerApiCalls.setIamPolicy(request, options, callback);
    }
    /**
     * Gets the IAM access control policy for a function.
     * Returns an empty policy if the function exists and does not have a policy
     * set.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {google.iam.v1.GetPolicyOptions} request.options
     *   OPTIONAL: A `GetPolicyOptions` object for specifying options to
     *   `GetIamPolicy`. This field is only used by Cloud IAM.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Policy]{@link google.iam.v1.Policy}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    getIamPolicy(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            resource: request.resource || '',
        });
        this.initialize();
        return this.innerApiCalls.getIamPolicy(request, options, callback);
    }
    /**
     * Tests the specified permissions against the IAM access control policy
     * for a function.
     * If the function does not exist, this will return an empty set of
     * permissions, not a NOT_FOUND error.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.resource
     *   REQUIRED: The resource for which the policy detail is being requested.
     *   See the operation documentation for the appropriate value for this field.
     * @param {string[]} request.permissions
     *   The set of permissions to check for the `resource`. Permissions with
     *   wildcards (such as '*' or 'storage.*') are not allowed. For more
     *   information see
     *   [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [TestIamPermissionsResponse]{@link google.iam.v1.TestIamPermissionsResponse}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    testIamPermissions(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            resource: request.resource || '',
        });
        this.initialize();
        return this.innerApiCalls.testIamPermissions(request, options, callback);
    }
    /**
     * Creates a new function. If a function with the given name already exists in
     * the specified project, the long running operation will return
     * `ALREADY_EXISTS` error.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.location
     *   Required. The project and location in which the function should be created, specified
     *   in the format `projects/* /locations/*`
     * @param {google.cloud.functions.v1.CloudFunction} request.function
     *   Required. Function to be created.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    createFunction(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            location: request.location || '',
        });
        this.initialize();
        return this.innerApiCalls.createFunction(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by the createFunction() method.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *
     * @example:
     *   const decodedOperation = await checkCreateFunctionProgress(name);
     *   console.log(decodedOperation.result);
     *   console.log(decodedOperation.done);
     *   console.log(decodedOperation.metadata);
     *
     */
    async checkCreateFunctionProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createFunction, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    /**
     * Updates existing function.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.functions.v1.CloudFunction} request.function
     *   Required. New version of the function.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required list of fields to be updated in this request.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    updateFunction(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            'function.name': request.function.name || '',
        });
        this.initialize();
        return this.innerApiCalls.updateFunction(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by the updateFunction() method.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *
     * @example:
     *   const decodedOperation = await checkUpdateFunctionProgress(name);
     *   console.log(decodedOperation.result);
     *   console.log(decodedOperation.done);
     *   console.log(decodedOperation.metadata);
     *
     */
    async checkUpdateFunctionProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.updateFunction, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    /**
     * Deletes a function with the given name from the specified project. If the
     * given function is used by some trigger, the trigger will be updated to
     * remove this function.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the function which should be deleted.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Operation]{@link google.longrunning.Operation}.
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    deleteFunction(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            name: request.name || '',
        });
        this.initialize();
        return this.innerApiCalls.deleteFunction(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by the deleteFunction() method.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *
     * @example:
     *   const decodedOperation = await checkDeleteFunctionProgress(name);
     *   console.log(decodedOperation.result);
     *   console.log(decodedOperation.done);
     *   console.log(decodedOperation.metadata);
     *
     */
    async checkDeleteFunctionProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.deleteFunction, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    /**
     * Returns a list of functions that belong to the requested project.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The project and location from which the function should be listed,
     *   specified in the format `projects/* /locations/*`
     *   If you want to list functions in all locations, use "-" in place of a
     *   location. When listing functions in all locations, if one or more
     *   location(s) are unreachable, the response will contain functions from all
     *   reachable locations along with the names of any unreachable locations.
     * @param {number} request.pageSize
     *   Maximum number of functions to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last
     *   `ListFunctionsResponse`; indicates that
     *   this is a continuation of a prior `ListFunctions` call, and that the
     *   system should return the next page of data.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of [CloudFunction]{@link google.cloud.functions.v1.CloudFunction}.
     *   The client library support auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *
     *   When autoPaginate: false is specified through options, the array has three elements.
     *   The first element is Array of [CloudFunction]{@link google.cloud.functions.v1.CloudFunction} that corresponds to
     *   the one page received from the API server.
     *   If the second element is not null it contains the request object of type [ListFunctionsRequest]{@link google.cloud.functions.v1.ListFunctionsRequest}
     *   that can be used to obtain the next page of the results.
     *   If it is null, the next page does not exist.
     *   The third element contains the raw response received from the API server. Its type is
     *   [ListFunctionsResponse]{@link google.cloud.functions.v1.ListFunctionsResponse}.
     *
     *   The promise has a method named "cancel" which cancels the ongoing API call.
     */
    listFunctions(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            parent: request.parent || '',
        });
        this.initialize();
        return this.innerApiCalls.listFunctions(request, options, callback);
    }
    /**
     * Equivalent to {@link listFunctions}, but returns a NodeJS Stream object.
     *
     * This fetches the paged responses for {@link listFunctions} continuously
     * and invokes the callback registered for 'data' event for each element in the
     * responses.
     *
     * The returned object has 'end' method when no more elements are required.
     *
     * autoPaginate option will be ignored.
     *
     * @see {@link https://nodejs.org/api/stream.html}
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The project and location from which the function should be listed,
     *   specified in the format `projects/* /locations/*`
     *   If you want to list functions in all locations, use "-" in place of a
     *   location. When listing functions in all locations, if one or more
     *   location(s) are unreachable, the response will contain functions from all
     *   reachable locations along with the names of any unreachable locations.
     * @param {number} request.pageSize
     *   Maximum number of functions to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last
     *   `ListFunctionsResponse`; indicates that
     *   this is a continuation of a prior `ListFunctions` call, and that the
     *   system should return the next page of data.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [CloudFunction]{@link google.cloud.functions.v1.CloudFunction} on 'data' event.
     */
    listFunctionsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            parent: request.parent || '',
        });
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listFunctions.createStream(this.innerApiCalls.listFunctions, request, callSettings);
    }
    /**
     * Equivalent to {@link listFunctions}, but returns an iterable object.
     *
     * for-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The project and location from which the function should be listed,
     *   specified in the format `projects/* /locations/*`
     *   If you want to list functions in all locations, use "-" in place of a
     *   location. When listing functions in all locations, if one or more
     *   location(s) are unreachable, the response will contain functions from all
     *   reachable locations along with the names of any unreachable locations.
     * @param {number} request.pageSize
     *   Maximum number of functions to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last
     *   `ListFunctionsResponse`; indicates that
     *   this is a continuation of a prior `ListFunctions` call, and that the
     *   system should return the next page of data.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
     */
    listFunctionsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({
            parent: request.parent || '',
        });
        options = options || {};
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listFunctions.asyncIterate(this.innerApiCalls['listFunctions'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified cloudFunction resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} function
     * @returns {string} Resource name string.
     */
    cloudFunctionPath(project, location, function_) {
        return this.pathTemplates.cloudFunctionPathTemplate.render({
            project: project,
            location: location,
            function: function_,
        });
    }
    /**
     * Parse the project from CloudFunction resource.
     *
     * @param {string} cloudFunctionName
     *   A fully-qualified path representing CloudFunction resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCloudFunctionName(cloudFunctionName) {
        return this.pathTemplates.cloudFunctionPathTemplate.match(cloudFunctionName)
            .project;
    }
    /**
     * Parse the location from CloudFunction resource.
     *
     * @param {string} cloudFunctionName
     *   A fully-qualified path representing CloudFunction resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCloudFunctionName(cloudFunctionName) {
        return this.pathTemplates.cloudFunctionPathTemplate.match(cloudFunctionName)
            .location;
    }
    /**
     * Parse the function from CloudFunction resource.
     *
     * @param {string} cloudFunctionName
     *   A fully-qualified path representing CloudFunction resource.
     * @returns {string} A string representing the function.
     */
    matchFunctionFromCloudFunctionName(cloudFunctionName) {
        return this.pathTemplates.cloudFunctionPathTemplate.match(cloudFunctionName)
            .function;
    }
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
    }
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
    }
    /**
     * Terminate the GRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     */
    close() {
        this.initialize();
        if (!this._terminated) {
            return this.cloudFunctionsServiceStub.then(stub => {
                this._terminated = true;
                stub.close();
            });
        }
        return Promise.resolve();
    }
}
exports.CloudFunctionsServiceClient = CloudFunctionsServiceClient;
//# sourceMappingURL=cloud_functions_service_client.js.map