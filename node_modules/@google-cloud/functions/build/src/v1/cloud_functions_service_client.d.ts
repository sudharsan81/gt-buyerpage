/// <reference types="node" />
import * as gax from 'google-gax';
import { Callback, Descriptors, ClientOptions, LROperation, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  A service that application uses to manipulate triggers and functions.
 * @class
 * @memberof v1
 */
export declare class CloudFunctionsServiceClient {
    private _terminated;
    private _opts;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    cloudFunctionsServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of CloudFunctionsServiceClient.
     *
     * @param {object} [options] - The configuration object. See the subsequent
     *   parameters for more details.
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     */
    constructor(opts?: ClientOptions);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    getFunction(request: protos.google.cloud.functions.v1.IGetFunctionRequest, options?: gax.CallOptions): Promise<[protos.google.cloud.functions.v1.ICloudFunction, protos.google.cloud.functions.v1.IGetFunctionRequest | undefined, {} | undefined]>;
    getFunction(request: protos.google.cloud.functions.v1.IGetFunctionRequest, options: gax.CallOptions, callback: Callback<protos.google.cloud.functions.v1.ICloudFunction, protos.google.cloud.functions.v1.IGetFunctionRequest | null | undefined, {} | null | undefined>): void;
    getFunction(request: protos.google.cloud.functions.v1.IGetFunctionRequest, callback: Callback<protos.google.cloud.functions.v1.ICloudFunction, protos.google.cloud.functions.v1.IGetFunctionRequest | null | undefined, {} | null | undefined>): void;
    callFunction(request: protos.google.cloud.functions.v1.ICallFunctionRequest, options?: gax.CallOptions): Promise<[protos.google.cloud.functions.v1.ICallFunctionResponse, protos.google.cloud.functions.v1.ICallFunctionRequest | undefined, {} | undefined]>;
    callFunction(request: protos.google.cloud.functions.v1.ICallFunctionRequest, options: gax.CallOptions, callback: Callback<protos.google.cloud.functions.v1.ICallFunctionResponse, protos.google.cloud.functions.v1.ICallFunctionRequest | null | undefined, {} | null | undefined>): void;
    callFunction(request: protos.google.cloud.functions.v1.ICallFunctionRequest, callback: Callback<protos.google.cloud.functions.v1.ICallFunctionResponse, protos.google.cloud.functions.v1.ICallFunctionRequest | null | undefined, {} | null | undefined>): void;
    generateUploadUrl(request: protos.google.cloud.functions.v1.IGenerateUploadUrlRequest, options?: gax.CallOptions): Promise<[protos.google.cloud.functions.v1.IGenerateUploadUrlResponse, protos.google.cloud.functions.v1.IGenerateUploadUrlRequest | undefined, {} | undefined]>;
    generateUploadUrl(request: protos.google.cloud.functions.v1.IGenerateUploadUrlRequest, options: gax.CallOptions, callback: Callback<protos.google.cloud.functions.v1.IGenerateUploadUrlResponse, protos.google.cloud.functions.v1.IGenerateUploadUrlRequest | null | undefined, {} | null | undefined>): void;
    generateUploadUrl(request: protos.google.cloud.functions.v1.IGenerateUploadUrlRequest, callback: Callback<protos.google.cloud.functions.v1.IGenerateUploadUrlResponse, protos.google.cloud.functions.v1.IGenerateUploadUrlRequest | null | undefined, {} | null | undefined>): void;
    generateDownloadUrl(request: protos.google.cloud.functions.v1.IGenerateDownloadUrlRequest, options?: gax.CallOptions): Promise<[protos.google.cloud.functions.v1.IGenerateDownloadUrlResponse, protos.google.cloud.functions.v1.IGenerateDownloadUrlRequest | undefined, {} | undefined]>;
    generateDownloadUrl(request: protos.google.cloud.functions.v1.IGenerateDownloadUrlRequest, options: gax.CallOptions, callback: Callback<protos.google.cloud.functions.v1.IGenerateDownloadUrlResponse, protos.google.cloud.functions.v1.IGenerateDownloadUrlRequest | null | undefined, {} | null | undefined>): void;
    generateDownloadUrl(request: protos.google.cloud.functions.v1.IGenerateDownloadUrlRequest, callback: Callback<protos.google.cloud.functions.v1.IGenerateDownloadUrlResponse, protos.google.cloud.functions.v1.IGenerateDownloadUrlRequest | null | undefined, {} | null | undefined>): void;
    setIamPolicy(request: protos.google.iam.v1.ISetIamPolicyRequest, options?: gax.CallOptions): Promise<[protos.google.iam.v1.IPolicy, protos.google.iam.v1.ISetIamPolicyRequest | undefined, {} | undefined]>;
    setIamPolicy(request: protos.google.iam.v1.ISetIamPolicyRequest, options: gax.CallOptions, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.ISetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    setIamPolicy(request: protos.google.iam.v1.ISetIamPolicyRequest, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.ISetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    getIamPolicy(request: protos.google.iam.v1.IGetIamPolicyRequest, options?: gax.CallOptions): Promise<[protos.google.iam.v1.IPolicy, protos.google.iam.v1.IGetIamPolicyRequest | undefined, {} | undefined]>;
    getIamPolicy(request: protos.google.iam.v1.IGetIamPolicyRequest, options: gax.CallOptions, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.IGetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    getIamPolicy(request: protos.google.iam.v1.IGetIamPolicyRequest, callback: Callback<protos.google.iam.v1.IPolicy, protos.google.iam.v1.IGetIamPolicyRequest | null | undefined, {} | null | undefined>): void;
    testIamPermissions(request: protos.google.iam.v1.ITestIamPermissionsRequest, options?: gax.CallOptions): Promise<[protos.google.iam.v1.ITestIamPermissionsResponse, protos.google.iam.v1.ITestIamPermissionsRequest | undefined, {} | undefined]>;
    testIamPermissions(request: protos.google.iam.v1.ITestIamPermissionsRequest, options: gax.CallOptions, callback: Callback<protos.google.iam.v1.ITestIamPermissionsResponse, protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined, {} | null | undefined>): void;
    testIamPermissions(request: protos.google.iam.v1.ITestIamPermissionsRequest, callback: Callback<protos.google.iam.v1.ITestIamPermissionsResponse, protos.google.iam.v1.ITestIamPermissionsRequest | null | undefined, {} | null | undefined>): void;
    createFunction(request: protos.google.cloud.functions.v1.ICreateFunctionRequest, options?: gax.CallOptions): Promise<[LROperation<protos.google.cloud.functions.v1.ICloudFunction, protos.google.cloud.functions.v1.IOperationMetadataV1>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    createFunction(request: protos.google.cloud.functions.v1.ICreateFunctionRequest, options: gax.CallOptions, callback: Callback<LROperation<protos.google.cloud.functions.v1.ICloudFunction, protos.google.cloud.functions.v1.IOperationMetadataV1>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    createFunction(request: protos.google.cloud.functions.v1.ICreateFunctionRequest, callback: Callback<LROperation<protos.google.cloud.functions.v1.ICloudFunction, protos.google.cloud.functions.v1.IOperationMetadataV1>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by the createFunction() method.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *
     * @example:
     *   const decodedOperation = await checkCreateFunctionProgress(name);
     *   console.log(decodedOperation.result);
     *   console.log(decodedOperation.done);
     *   console.log(decodedOperation.metadata);
     *
     */
    checkCreateFunctionProgress(name: string): Promise<LROperation<protos.google.cloud.functions.v1.CloudFunction, protos.google.cloud.functions.v1.OperationMetadataV1>>;
    updateFunction(request: protos.google.cloud.functions.v1.IUpdateFunctionRequest, options?: gax.CallOptions): Promise<[LROperation<protos.google.cloud.functions.v1.ICloudFunction, protos.google.cloud.functions.v1.IOperationMetadataV1>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    updateFunction(request: protos.google.cloud.functions.v1.IUpdateFunctionRequest, options: gax.CallOptions, callback: Callback<LROperation<protos.google.cloud.functions.v1.ICloudFunction, protos.google.cloud.functions.v1.IOperationMetadataV1>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    updateFunction(request: protos.google.cloud.functions.v1.IUpdateFunctionRequest, callback: Callback<LROperation<protos.google.cloud.functions.v1.ICloudFunction, protos.google.cloud.functions.v1.IOperationMetadataV1>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by the updateFunction() method.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *
     * @example:
     *   const decodedOperation = await checkUpdateFunctionProgress(name);
     *   console.log(decodedOperation.result);
     *   console.log(decodedOperation.done);
     *   console.log(decodedOperation.metadata);
     *
     */
    checkUpdateFunctionProgress(name: string): Promise<LROperation<protos.google.cloud.functions.v1.CloudFunction, protos.google.cloud.functions.v1.OperationMetadataV1>>;
    deleteFunction(request: protos.google.cloud.functions.v1.IDeleteFunctionRequest, options?: gax.CallOptions): Promise<[LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.functions.v1.IOperationMetadataV1>, protos.google.longrunning.IOperation | undefined, {} | undefined]>;
    deleteFunction(request: protos.google.cloud.functions.v1.IDeleteFunctionRequest, options: gax.CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.functions.v1.IOperationMetadataV1>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteFunction(request: protos.google.cloud.functions.v1.IDeleteFunctionRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.functions.v1.IOperationMetadataV1>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by the deleteFunction() method.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *
     * @example:
     *   const decodedOperation = await checkDeleteFunctionProgress(name);
     *   console.log(decodedOperation.result);
     *   console.log(decodedOperation.done);
     *   console.log(decodedOperation.metadata);
     *
     */
    checkDeleteFunctionProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.functions.v1.OperationMetadataV1>>;
    listFunctions(request: protos.google.cloud.functions.v1.IListFunctionsRequest, options?: gax.CallOptions): Promise<[protos.google.cloud.functions.v1.ICloudFunction[], protos.google.cloud.functions.v1.IListFunctionsRequest | null, protos.google.cloud.functions.v1.IListFunctionsResponse]>;
    listFunctions(request: protos.google.cloud.functions.v1.IListFunctionsRequest, options: gax.CallOptions, callback: PaginationCallback<protos.google.cloud.functions.v1.IListFunctionsRequest, protos.google.cloud.functions.v1.IListFunctionsResponse | null | undefined, protos.google.cloud.functions.v1.ICloudFunction>): void;
    listFunctions(request: protos.google.cloud.functions.v1.IListFunctionsRequest, callback: PaginationCallback<protos.google.cloud.functions.v1.IListFunctionsRequest, protos.google.cloud.functions.v1.IListFunctionsResponse | null | undefined, protos.google.cloud.functions.v1.ICloudFunction>): void;
    /**
     * Equivalent to {@link listFunctions}, but returns a NodeJS Stream object.
     *
     * This fetches the paged responses for {@link listFunctions} continuously
     * and invokes the callback registered for 'data' event for each element in the
     * responses.
     *
     * The returned object has 'end' method when no more elements are required.
     *
     * autoPaginate option will be ignored.
     *
     * @see {@link https://nodejs.org/api/stream.html}
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The project and location from which the function should be listed,
     *   specified in the format `projects/* /locations/*`
     *   If you want to list functions in all locations, use "-" in place of a
     *   location. When listing functions in all locations, if one or more
     *   location(s) are unreachable, the response will contain functions from all
     *   reachable locations along with the names of any unreachable locations.
     * @param {number} request.pageSize
     *   Maximum number of functions to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last
     *   `ListFunctionsResponse`; indicates that
     *   this is a continuation of a prior `ListFunctions` call, and that the
     *   system should return the next page of data.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [CloudFunction]{@link google.cloud.functions.v1.CloudFunction} on 'data' event.
     */
    listFunctionsStream(request?: protos.google.cloud.functions.v1.IListFunctionsRequest, options?: gax.CallOptions): Transform;
    /**
     * Equivalent to {@link listFunctions}, but returns an iterable object.
     *
     * for-await-of syntax is used with the iterable to recursively get response element on-demand.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   The project and location from which the function should be listed,
     *   specified in the format `projects/* /locations/*`
     *   If you want to list functions in all locations, use "-" in place of a
     *   location. When listing functions in all locations, if one or more
     *   location(s) are unreachable, the response will contain functions from all
     *   reachable locations along with the names of any unreachable locations.
     * @param {number} request.pageSize
     *   Maximum number of functions to return per call.
     * @param {string} request.pageToken
     *   The value returned by the last
     *   `ListFunctionsResponse`; indicates that
     *   this is a continuation of a prior `ListFunctions` call, and that the
     *   system should return the next page of data.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that conforms to @link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols.
     */
    listFunctionsAsync(request?: protos.google.cloud.functions.v1.IListFunctionsRequest, options?: gax.CallOptions): AsyncIterable<protos.google.cloud.functions.v1.ICloudFunction>;
    /**
     * Return a fully-qualified cloudFunction resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} function
     * @returns {string} Resource name string.
     */
    cloudFunctionPath(project: string, location: string, function_: string): string;
    /**
     * Parse the project from CloudFunction resource.
     *
     * @param {string} cloudFunctionName
     *   A fully-qualified path representing CloudFunction resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCloudFunctionName(cloudFunctionName: string): string | number;
    /**
     * Parse the location from CloudFunction resource.
     *
     * @param {string} cloudFunctionName
     *   A fully-qualified path representing CloudFunction resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCloudFunctionName(cloudFunctionName: string): string | number;
    /**
     * Parse the function from CloudFunction resource.
     *
     * @param {string} cloudFunctionName
     *   A fully-qualified path representing CloudFunction resource.
     * @returns {string} A string representing the function.
     */
    matchFunctionFromCloudFunctionName(cloudFunctionName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Terminate the GRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     */
    close(): Promise<void>;
}
